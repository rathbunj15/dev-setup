#!/bin/bash

# dev-setup - Installs tools and packages for development purposes.
#
# Copyright (Â©) 2025 rathbunj15 <rathbunj15@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

declare -A OS_MAPPED_REQUIRED_PACKAGES

OS_MAPPED_REQUIRED_PACKAGES["Ubuntu"]="python3 python3-pip software-properties-common ansible"

OS_NAME=$(source /etc/os-release && echo "$NAME")
VERBOSE=false

function get_package_manager() {
    pkg_mgr=""

    case "$OS_NAME" in
        Ubuntu*|Debian*|"Linux Mint"*)
            pkg_mgr=$(readlink -f $(which apt-get))
            ;;

        SUSE*|*SUSE*|SLES*|"Red Hat Enterprise Linux"*)
            pkg_mgr=$(readlink -f $(which zypper))
            ;;

        Fedora*|CentOS*)
            # Fedora and CentOS use DNF or YUM
            if $(command -v dnf) &> /dev/null; then
                pkg_mgr=$(readlink -f $(which dnf))
            elif $(command -v yum) &> /dev/null; then
                echo "System does not have dnf installed, using yum instead."
                pkg_mgr=$(readlink -f $(which yum))
            fi
            ;;

        *)
            echo "Unsupported OS: $OS_NAME"
            exit 1
            ;;
    esac

    if [[ $VERBOSE == true ]]; then
        echo "Using detected package manager $(basename $pkg_mgr)"
    fi
    
    echo $pkg_mgr
}

function install_required_repos() {
    case "$OS_NAME" in
        Ubuntu*|Debian*|"Linux Mint"*)
            repos=('ppa:ansible/ansible')
            for repo in "${repos[@]}"; do
                if [[ ! $(grep -rh "$pkg" /etc/apt/sources.list.d/) ]]; then
                    if [[ $VERBOSE == true ]]; then
                        echo "Installing package repository $repo..."
                    fi

                    add-apt-repository --yes --update $repo > /dev/null
                else
                    # Only print if the verbose flag is enabled
                    if [[ $VERBOSE == true ]]; then
                        echo "Repository $repo already installed. Skipping..."
                    fi
                fi
            done
            ;;
    esac
}

function install_required_packages() {
    IFS=' '

    # Read the correct array of packages and split them on the IFS (space)
    read -ra os_packages <<< "${OS_MAPPED_REQUIRED_PACKAGES[$OS_NAME]}"

    for pkg in "${os_packages[@]}"; do
        
        if [[ ! $(which "$pkg") ]]; then
            if [[ $VERBOSE == true ]]; then
                echo "Installing package $pkg..."
            fi

            # Install the package.
            $1 install -y $pkg > /dev/null

            if [[ $? != 0 ]]; then
                echo "Error: Failed to install $pkg..."
                exit 1
            fi

            if [[ $VERBOSE == true ]]; then
                echo "Successfully installed package $pkg."
            fi
        else
            if [[ $VERBOSE == true ]]; then
                echo "Package $pkg is already installed."
            fi
        fi
    done
}

function help() {
    local code=$1
    echo """
Usage: dev-setup [options]

Install tools, packages, scripts, and docker onto the local system.

Options:
    -v, --verbose      Enable verbose output
    -p, --packages     Install only packages using the system's default package manager.
    -d, --docker       Install only docker
    -a, --aliases      Install only aliases (inserted into ~/.bashrc file)
    -s, --scripts      Install only scripts (copied to /usr/local/bin)
    -oc, --openshift-cli <url>  Install the OpenShift CLI from the provided URL
"""
    exit $1
}

function isDockerInstalled() {
    # Verify that docker is installed.
    if [[ ! $(which docker) ]]; then
        return false
    fi

    return true
}

function areAllScriptsInstalled() {
    # Check that all bin scripts are installed in /usr/local/bin.
    for file in bin/*; do
        if [[ ! -f "/usr/local/bin/$(basename $file)" ]]; then
            echo -e "\nScript $(basename $file) is not installed. Reinstalling all scripts..."
            return false
        fi
    done

    return true
}

function runPlaybook() {
    local playbookLocation="playbooks/$1"
    ansible-playbook $playbookLocation ${@:2}
}

function parse_args() {
    installAll=true
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--aliases)
                installAll=false
                runPlaybook install-aliases.yaml
                shift
                ;;
            -s|--scripts)
                installAll=false
                runPlaybook install-scripts.yaml
                shift
                ;;
            -d|--docker)
                installAll=false
                runPlaybook install-docker.yaml
                shift
                ;;
            -p|--packages)
                installAll=false
                runPlaybook install-packages.yaml
                shift
                ;;
            -oc|--openshift-cli)
                installAll=false
                runPlaybook install-openshift-cli.yaml -e "oc_url=$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                help 0
                ;;
            *)
                echo "Unknown argument: $1"
                help 1
                ;;
        esac
    done

    if [[ $installAll == true ]]; then
        install_required_packages $pkg_mgr_path
    fi
}

pkg_mgr_path=$(get_package_manager | tail -n 1)

install_required_repos
install_required_packages $pkg_mgr_path

parse_args "$@"